{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Instance2d is a JavaScript framework where each game object (referred to as an Instance) can have a parent and a child, allowing you to organize your games in various ways. You can access instances easily just by seperating their id's by dots. Eg: player.gun.cooldown.</p> <p>All of the modules are split into different instances, called services with unique properties and functions.</p> <p>You can find all of these services under the <code>Game</code> instance, or import them as a seperate variable.</p> <p>Website</p>"},{"location":"#using-it","title":"Using it","text":"<p>To include this framework in your code, simply add this to the start of your script:</p> <pre><code>import {Game, Instance, InputService, Screen, RunService, Nowhere, Color3, Vector2, Enum, DrawData} from 'https://nikaxe-dev.github.io/Instance2d/Instance2d.js'\n</code></pre> <p>Just make sure that the <code>type</code> attribute of your <code>html</code> script tag is <code>module</code></p> <p>Example:</p> <pre><code>&lt;script type=\"module\"&gt;\n    import {Game, Instance, InputService, Screen, RunService, Nowhere, Color3, Vector2, Enum, DrawData} from 'https://nikaxe-dev.github.io/Instance2d/Instance2d.js'\n    // blah blah blah\n&lt;/script&gt;\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For detailed documentation, please visit the Instance2d Wiki.</p>"},{"location":"#example-simple-player-controller","title":"Example: Simple Player Controller","text":"<p>Here's an example of a very simple player controler written using this framework</p> <p>Try it out</p> <p>JavaScript: <pre><code>// Import Instance2d's modules and set the game up.\n\nimport {Game, Instance, InputService, Screen, RunService, Nowhere, Color3, Vector2, Enum, DrawData} from '/Instance2d/Instance2d.js'\n\n// Set the games properties.\n\n// Background Color\nGame.BackgroundColor3 = Color3.new(0, 0, 0)\n\n// Target Frame Rate\nRunService.TargetFrameRate = 120\n\n// Do Disable Right Click Menu\nGame.DoDisableRightClickMenu = false\n\n// Set the screens size (defualts to the window size if not set)\nScreen.Size = Vector2.new(window.innerWidth, window.innerHeight)\n\n// Game Speed\nRunService.GameSpeed = 1\n\n// Initialize the game with the canvas and the gameloop function.\n\nfunction gameloop() {\n    // Set the screens size (optional)\n    Screen.Size = Vector2.new(window.innerWidth, window.innerHeight)\n\n    RunService.frame()\n}\n\nGame.Init(document.getElementById(\"canvas\"))\n\n// Create the player.\n\nlet player = Instance.Sprite2d.new({\n    Id: \"Player\", // The Players Id. Make sure its unique because otherwise you risk overwriting other instances.\n    Type: \"Player\", // The type. Used for general filtering of instances.\n    Position: Vector2.new(), // The position. At 0, 0 this object with be at the center of the screen.\n    Rotation: 90, // The rotation of the object.\n    RotVelocity: 0, // The rotational velocity of the object.\n    Size: Vector2.new(50, 50), // The size of the object.\n    Velocity: Vector2.new(), // The velocity of the object.\n    DrawData: DrawData.new(Enum.DrawType.PixelImage, \"./player.png\"), // The draw data of the object. Find out more about DrawData in the documentation.\n    ZIndex: 10, // The ZIndex of the object. The higher the ZIndex the more in front the object will be.\n    CollisionType: Enum.CollisionType.Rectangle, // The collision type of the object. Find out more about CollisionType in the documentation.\n    Parent: Screen // The parent of the object. This is what the object is inside of. In this case it is the Screen.\n})\n\nplayer.Speed = 250 // Custom parameter for the player. This is the speed of the player that will be used in the players functions.\n\n// The movement script for the player. This will be called every frame.\n\nplayer.Script = function(speed) {\n    // Check for player input and move the player accordingly.\n    // Make sure to times this by the speed parameter (deltatime * RunService.GameSpeed)\n\n    if(InputService.KeyDown(\"a\")) {\n        player.Velocity.x -= player.Speed * speed\n    }\n\n    if(InputService.KeyDown(\"d\")) {\n        player.Velocity.x += player.Speed * speed\n    }\n\n    if(InputService.KeyDown(\"w\")) {\n        player.Velocity.y -= player.Speed * speed\n    }\n\n    if(InputService.KeyDown(\"s\")) {\n        player.Velocity.y += player.Speed * speed\n    }\n\n    // Add some friction to the player so it isnt as fast.\n\n    player.Velocity.x *= .75\n    player.Velocity.y *= .75\n\n    // Point the player towards the mouse.\n\n    player.Rotation = player.Position.PointTowards(InputService.Mouse.PointPosition) - 270\n}\n\n// Start the game.\n\nGame.Start(gameloop)\n</code></pre></p> <p>Html: <pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n            body {\n                overflow: hidden;\n                background-color: black;\n            }\n\n            * {\n                margin: 0;\n                padding: 0;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;canvas id=\"canvas\"&gt;\n            Your browser doesnt support the canvas api for some reason.\n        &lt;/canvas&gt;\n\n        &lt;script src=\"index.js\" type=\"module\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>The html will be pretty much the same for each example, so if it isnt shown, keep that in mind.</p>"},{"location":"Data/","title":"Data/Enum","text":"<p>There are many different datatypes in Instance2d, and this wikipage is for classifying them. Most of them can be instanced with the function <code>.new()</code></p>"},{"location":"Data/#enum","title":"Enum","text":"<ul> <li> <p><code>Rectangle</code> - Draws it as a rectangle,</p> </li> <li><code>PixelImage</code> - Draws it as a pixelated image,</li> <li><code>Image</code> - Draws it as an image,</li> <li> <p><code>Circle</code> - Draws it as a circle,</p> </li> <li> </li> <li> <p><code>Rectangle</code> - Uses the <code>instance.CollisionShape</code> as a rectangle (use <code>Vector2</code> for the <code>CollisionShape</code>),</p> </li> <li><code>Defined</code> - Uses the <code>instance.Size</code> parameter.,</li> <li><code>Custom</code> - (To Be Added) Uses the <code>instance.CollisionShape</code> as a list of points. (May become a new datatype.)</li> </ul>"},{"location":"Data/#drawtype","title":"DrawType","text":"<p>Controls the way things are drawn in <code>RenderService.Draw(DrawFrame)</code></p>"},{"location":"Data/#collisiontype-collision-is-to-be-added","title":"CollisionType (Collision is to be added!)","text":"<p>Controls the way collision is detected for collidable objects.</p>"},{"location":"Data/#datatypes","title":"DataTypes","text":"<p><code>Vector2.new(x = 0, y = x)</code></p> <pre><code>{\n\"x\": Number,\n\"y\": Number,\n\n\"Takeaway\": function(takeawayvector = Vector2.new()) {\nreturn Vector2.new(vector.x - takeawayvector.x, vector.y - takeawayvector.y)\n},\n\n\"Divide\": function(dividevector) {\nreturn Vector2.new(vector.x / dividevector.x, vector.y / dividevector.y)\n},\n\n\"PointTowards\": function(towards) {\nreturn Vector2.takeaway(towards, vector).Direction\n},\n\nget Magnitude() {\nreturn Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n},\n\nget Direction() {\nlet angle = (Math.atan2(vector.y, vector.x) / Math.PI) * 180\nreturn angle\n},\n}\n</code></pre> <p><code>Vector2.Takeaway(takeawayvector = Vector2.new())</code> =&gt; returns the <code>Vector2</code> with it's x and y components taken away by the <code>takeawayvectors</code> components.</p> <p><code>Vector2.Divide(dividevector = Vector2.new())</code> =&gt; returns the <code>Vector2</code> with it's x and y components divided by the <code>dividevectors</code> components.</p> <p><code>Vector2.PointTowards(towards = Vector2.new())</code> =&gt; returns the direction the <code>Vector2</code> would point to <code>towards</code>.</p> <p><code>Color3.new(r = 0, g = 0, b = 0)</code></p> <pre><code>{\n\"r\": Number,\n\"g\": Number,\n\"b\": Number\n}\n</code></pre>"},{"location":"Data/#vector2","title":"Vector2","text":"Vector2 is a datatype for a <code>position</code>, <code>size</code>, or <code>velocity</code> on the screen."},{"location":"Data/#color3","title":"Color3","text":"Returns a new <code>RGB</code> color."},{"location":"Data/#drawdata","title":"DrawData","text":"<p>The data used by <code>Sprite2d</code>'s that includes the type, and the <code>TextureURL</code> | <code>Color3</code>.</p> <p><code>DrawData.new(DrawType = Enum.DrawType.Rectangle, Type = \"placeholder.bmp\" | Color3.new())</code></p> <pre><code>{\n\"DrawType\": [Enum.DrawType],\n\"Type\": [\"placeholder.bmp\" | [Color3]]\n}\n</code></pre> <p><code>DrawFrame.new(drawdata = DrawData.new(), position = Vector2.new(), rotation = 0, size = Vector2.new(), gui = false)</code></p> <pre><code>{\n\"DrawData\": [DrawData],\n\"Position\": [Vector2],\n\"Rotation\": Number,\n\"Size\": [Vector2],\n\"Gui\": Boolean,\n}\n</code></pre> <p><code>DrawFrame.Gui</code> =&gt; A property controlling whether the camera is considered in the position.</p>"},{"location":"Data/#drawframe","title":"DrawFrame","text":"The data used by <code>RenderService.Draw()</code> to draw something on a screen."},{"location":"Examples/","title":"Examples","text":"<p>Example of a very simple player controler written using this framework</p> <p>Try it out</p> <pre><code>// Import Instance2d's modules and set the game up.\n\nimport {Game, Instance, InputService, Screen, RunService, Nowhere, Color3, Vector2, Enum, DrawData} from '/Instance2d/Instance2d.js'\n\n// Set the games properties.\n\n// Background Color\nGame.BackgroundColor3 = Color3.new(0, 0, 0)\n\n// Target Frame Rate\nRunService.TargetFrameRate = 120\n\n// Do Disable Right Click Menu\nGame.DoDisableRightClickMenu = false\n\n// Set the screens size (defualts to the window size if not set)\nScreen.Size = Vector2.new(window.innerWidth, window.innerHeight)\n\n// Game Speed\nRunService.GameSpeed = 1\n\n// Initialize the game with the canvas and the gameloop function.\n\nfunction gameloop() {\n    // Set the screens size (optional but recommended)\n    Screen.Size = Vector2.new(window.innerWidth, window.innerHeight)\n\n    RunService.frame()\n}\n\nGame.Init(document.getElementById(\"canvas\"))\n\n// Create the player.\n\nlet player = Instance.Sprite2d.new({\n    Id: \"Player\", // The Players Id. Make sure its unique because otherwise you risk overwriting other instances.\n    Type: \"Player\", // The type. Used for general filtering of instances.\n    Position: Vector2.new(), // The position. At 0, 0 this object with be at the center of the screen.\n    Rotation: 90, // The rotation of the object.\n    RotVelocity: 0, // The rotational velocity of the object.\n    Size: Vector2.new(50, 50), // The size of the object.\n    Velocity: Vector2.new(), // The velocity of the object.\n    DrawData: DrawData.new(Enum.DrawType.PixelImage, \"./player.png\"), // The draw data of the object. Find out more about DrawData in the documentation.\n    ZIndex: 10, // The ZIndex of the object. The higher the ZIndex the more in front the object will be.\n    CollisionType: Enum.CollisionType.Rectangle, // The collision type of the object. Find out more about CollisionType in the documentation.\n    Parent: Screen // The parent of the object. This is what the object is inside of. In this case it is the Screen.\n})\n\nplayer.Speed = 250 // Custom parameter for the player. This is the speed of the player that will be used in the players functions.\n\n// The movement script for the player. This will be called every frame.\n\nplayer.Script = function(speed) {\n    // Check for player input and move the player accordingly.\n    // Make sure to times this by the speed parameter (deltatime * RunService.GameSpeed)\n\n    if(InputService.KeyDown(\"a\")) {\n        player.Velocity.x -= player.Speed * speed\n    }\n\n    if(InputService.KeyDown(\"d\")) {\n        player.Velocity.x += player.Speed * speed\n    }\n\n    if(InputService.KeyDown(\"w\")) {\n        player.Velocity.y -= player.Speed * speed\n    }\n\n    if(InputService.KeyDown(\"s\")) {\n        player.Velocity.y += player.Speed * speed\n    }\n\n    // Add some friction to the player so it isnt as fast.\n\n    player.Velocity.x *= .75\n    player.Velocity.y *= .75\n\n    // Point the player towards the mouse.\n\n    player.Rotation = player.Position.PointTowards(InputService.Mouse.PointPosition) - 270\n}\n\n// Start the game.\n\nGame.Start(gameloop)\n</code></pre> <p>Example of the <code>cooldown</code> class.</p> <p>Open up the console to see the output. (CTRL + SHIFT + I)</p> <p>Try it out</p> <pre><code>// Import Instance2d's and set the games properties.\n\nimport {Game, Instance, InputService, Screen, RunService, Nowhere, Color3, Vector2, Enum, DrawData} from 'https://nikaxe-dev.github.io/Instance2d/Instance2d.js'\nGame.BackgroundColor3 = Color3.new(0, 0, 0)\nRunService.TargetFrameRate = 60\nRunService.GameSpeed = 1\nScreen.Size = Vector2.new(window.innerWidth, window.innerHeight)\n\n// Initialize the game.\n\nGame.Init(document.getElementById(\"canvas\"))\n\n// Create a cooldown that runs \"cooldown ended\" every second.\n\nlet cooldown = Instance.Cooldown.new(\n    {\n        Id: \"testcooldown\", // Id\n        Type: \"cooldown\", // Type\n        Time: 1, // Time it takes to end (in seconds)\n        Parent: Nowhere, // Parent\n        Loop: true, // Controls whether the cooldown should loop or not\n\n        // Function that runs when the cooldown ends.\n        OnEnd: function() {\n            console.log(\"Cooldown ended\")\n        }\n    }\n)\n\n// Start the cooldown.\ncooldown.Play()\n\nfunction gameloop() {\n    // Set the screens size (optional)\n    Screen.Size = Vector2.new(window.innerWidth, window.innerHeight)\n\n    RunService.frame()\n}\n\n// Start the game.\n\nGame.Start(gameloop)\n</code></pre>"},{"location":"Examples/#simple-player-controller","title":"Simple Player Controller","text":""},{"location":"Examples/#cooldown-example","title":"Cooldown Example","text":""},{"location":"Game/","title":"Game","text":""},{"location":"Game/#about","title":"About","text":"<p><code>Game</code> is a module that is used for declaring properties of the game.</p> <pre><code>{\n    \"BackgroundColor3\": [Color3],\n    \"DoDisableRightClickMenu\": Boolean,\n\n    \"Screen\": Screen,\n    \"Instance\": Instance,\n    \"Nowhere\": Nowhere,\n    \"RunService\": RunService,\n    \"RenderService\": RenderService,\n    \"InputService\": InputService,\n\n    \"Init\": function(canvas),\n\n    \"Start\": function(gameloop = function() { RunService.frame() })\n}\n</code></pre>"},{"location":"Game/#properties","title":"Properties","text":"<ul> <li><code>BackgroundColor3</code>: Color3 that controls the color of the background.</li> <li><code>DoDisableRightClickMenu</code>: Controls if the right click menu is disabled.</li> </ul>"},{"location":"Game/#functions","title":"Functions","text":"<ul> <li><code>Init(canvas)</code> =&gt; Initiates the game, and the services.</li> <li><code>Start(gameloop = function() { RunService.frame() })</code> =&gt; Starts the gameloop.</li> </ul>"},{"location":"Home/","title":"Home","text":"<p><code>import {Game, Instance, InputService, Screen, RunService, Nowhere, Color3, Vector2, Enum, DrawData} from 'https://nikaxe-dev.github.io/Instance2d/Instance2d.js'</code></p>"},{"location":"Home/#examples","title":"Examples","text":""},{"location":"Home/#services","title":"Services:","text":""},{"location":"Home/#game","title":"Game","text":""},{"location":"Home/#instance","title":"Instance","text":""},{"location":"Home/#data","title":"Data","text":""},{"location":"Home/#screen","title":"Screen","text":""},{"location":"Home/#renderservice","title":"RenderService","text":""},{"location":"Home/#runservice","title":"RunService","text":""},{"location":"Home/#inputservice","title":"InputService","text":""},{"location":"Home/#utils","title":"Utils","text":""},{"location":"InputService/","title":"InputService","text":""},{"location":"InputService/#about","title":"About","text":"<p><code>InputService</code> is a service that has many properties, all getting updated once the game starts. It is used for getting player input.</p>"},{"location":"InputService/#functions","title":"Functions","text":"<ul> <li><code>InputService.KeyDown(key)</code> =&gt; Returns if a key is down.</li> <li><code>InputService.BeginListen()</code> =&gt; Begins listening for inputs and updating the services properties. (Automatically executed on import)</li> </ul>"},{"location":"InputService/#properties","title":"Properties","text":""},{"location":"InputService/#keyboard","title":"<code>Keyboard</code>","text":"<ul> <li><code>Inputs</code>: Contains all keyboard inputs. When a key is down, its name will be <code>true</code> in here.</li> </ul>"},{"location":"InputService/#mouse","title":"<code>Mouse</code>","text":"<ul> <li><code>Position</code>: The position of the mouse on the screen.</li> <li><code>TruePosition</code>: The position of the mouse in the game. (<code>Mouse.Position</code> + <code>Screen.Camera.Position</code>)</li> <li><code>PointPosition</code>: The position of the mouse in the game, but it can be pointed to properly. (<code>Mouse.TruePosition</code> - <code>Vector2.new(window.innerWidth / 2, window.innerHeight / 2)</code>)</li> <li><code>Button1Down</code>: If the left mouse button is down.</li> <li><code>Button2Down</code>: If the right mouse button is down.</li> <li><code>Button3Down</code>: If the middle mouse button is down.</li> <li><code>ScrollwheelVelocity</code>: The velocity of the scrollwheel. (Up: 1, Down: -1)</li> </ul>"},{"location":"Instance/","title":"Instance","text":""},{"location":"Instance/#about","title":"About","text":"<p>Instance is a service that allows you to create instances. It is the first one you need to learn. Without it, the engine would be useless.</p>"},{"location":"Instance/#creating-an-instance","title":"Creating an instance","text":"<p>To create an instance, you have to use the <code>.new()</code> function.</p> <pre><code>Instance.new({\n    Id: \"Instance\",\n    Type: \"Instance\",\n    Parent: Screen,\n})\n</code></pre> <p>This makes the most basic instance. It doesnt have any properties apart from the ones needed, and can be used as folders for other instances.</p>"},{"location":"Instance/#the-different-classes","title":"The different classes","text":"<p>There are many different classes, from ones that you can see, to ones that are used for other purposes such as <code>Cooldown</code>. Every class and their functions are in the <code>Instance</code> module.</p> <p>To create a new one of any class you do: <pre><code>Instance.ClassNameHere.new({\n\n})\n</code></pre></p> <p>For example: <pre><code>Instance.Sprite2d.new({\n    Id: \"Player\",\n    Type: \"Player\",\n    Position: Vector2.new(),\n    Rotation: 90,\n    RotVelocity: 0,\n    Size: Vector2.new(50, 50),\n    Velocity: Vector2.new(),\n    DrawData: DrawData.new(Enum.DrawType.PixelImage, \"/images/player.png\"),\n    ZIndex: 10,\n    CollisionType: Enum.CollisionType.Rectangle,\n    Parent: Screen\n})\n</code></pre></p>"},{"location":"Instance/#parent-child-relationship","title":"Parent Child Relationship","text":"<p>Just like many other engines/frameworks, Instance2d is organized with a parent, child relationship between instances. Unlike JavaScript with the DOM and other ways of changing the projects organization, Instance2d lets you access instances very easily. Just like <code>luau (roblox lua)</code>, you access instances like you do with files on a computer. Example: <code>Screen.Player.Gun</code>. This has a couple limitations though, such as instances needing a unique <code>id</code> inside their parents. You can still have the same <code>id</code> as another instance, that just means that it will return the first instance found when getting an instance with an <code>id</code>.</p>"},{"location":"Instance/#functions","title":"Functions","text":"<ul> <li><code>Instance.new({Id: String, Type: String, Parent: Instance})</code> =&gt; Creates a new instance of the class <code>Instance</code>. Used in every <code>.new()</code> function of the module.</li> <li><code>Instance.isinstance(object = {})</code> =&gt; Returns if the given <code>Object</code> is an instance.</li> <li><code>Instance.giveinstance(instance, id, type, classname)</code> =&gt; Gives the given <code>Object</code> | <code>Instance</code> the correct properties if they dont have them.</li> <li><code>Instance.giveinstancefunctions(instance)</code> =&gt; Gives the given <code>Object</code> | <code>Instance</code> the basic functions needed for every instance. Used internally inside <code>Instance.giveinstance()</code>.</li> </ul>"},{"location":"Instance/#classes","title":"Classes","text":""},{"location":"Instance/#2d","title":"2d","text":""},{"location":"Instance/#instance2d","title":"Instance2d","text":"<p>Instance with a <code>position</code>, <code>rotation</code>, <code>rotationvelocity</code>, <code>velocity</code>, and <code>size</code>.</p> <p>Inherits: Instance</p> <p><code>.new({id, type, position: Vector2.new(), rotation: 0, rotationvelocity: 0, velocity: Vector2.new(), size: Vector2.new(50, 50), collisiontype: Enum.CollisionType.Rectangle, parent: Nowhere})</code></p> <pre><code>{\nId: String,\nType: String,\nClass: \"Sprite2d\",\nScript: Script(speed, instance),\nParent: [Instance],\nPosition: [Vector2],\nRotation: Number,\nRotVelocity: Number,\nCollisionType: [Enum.CollisionType]\n}\n</code></pre> <p><code>Instance2d.Colliding(Instance2d | Sprite2d)</code> =&gt; Returns <code>true</code> if the <code>Instance2d</code> is colliding with the <code>Instance2d</code> | <code>Sprite2d</code></p> <p><code>Instance2d.GetCollison()</code> =&gt; Returns every instance touching itself.</p>"},{"location":"Instance/#sprite2d","title":"Sprite2d","text":"<p>Instance2d that is drawn to the screen dependent on its property <code>DrawData</code>.</p> <p>Inherits: Instance2d</p> <p><code>.new({id, type, position: Vector2.new(), rotation: 0, rotationvelocity: 0, velocity: Vector2.new(), size: Vector2.new(50, 50), drawdata: DrawData.new(), zindex: 0, collisiontype: Enum.CollisionType.Rectangle, parent = Nowhere})</code></p> <pre><code>{\nClass: \"Sprite2d\",\nId: String,\nType: String,\nParent: [Instance],\nDrawData: [DrawData],\nPosition: [Vector2],\nSize: [Vector2],\nVelocity: [Vector2],\nRotation: Number,\nRotVelocity: Number,\nScript: function,\nZIndex: Number,\nCollisionType: [Enum.CollisionType]\n}\n</code></pre>"},{"location":"Instance/#camera2d","title":"Camera2d","text":"<p>A camera. Useless on its own, set <code>Screen.Camera</code> to one of these instances and your game has a camera.</p> <p>Inherits: Instance2d</p> <p><code>.new({id, type, position: Vector2.new(), rotation: 0, rotationvelocity: 0, velocity: Vector2.new(), zoom: 100, parent: Nowhere)}</code></p> <pre><code>{\nId: String,\nType: String,\nClass: \"Sprite2d\",\nScript: function,\nParent: [Instance],\nPosition: [Vector2],\nRotation: Number,\nRotVelocity: Number,\nZoom: Number%,\n}\n</code></pre>"},{"location":"Instance/#event","title":"Event","text":""},{"location":"Instance/#cooldown","title":"Cooldown","text":"<p>Use this to add time into your game. Useful for weapon cooldowns, debree deletion, ect.</p> <p>Inherits: Instance</p> <p><code>.new({id, type, time: 1, loop: false, onend: function() {}, parent: Nowhere)}</code></p> <pre><code>{\nId: String,\nType: String,\nClass: \"Cooldown\",\nScript: function,\nParent: [Instance],\nTime: Number,\nLoop: Boolean,\nOnEnd: function,\nPlaying: Boolean,\nMaxTime: Time\n}\n</code></pre> <p><code>Cooldown.Play()</code> =&gt; Sets <code>Cooldown.Playing</code> to true, also running any other tasks needed when starting a <code>Cooldown</code>.</p> <p><code>Cooldown.Stop()</code> =&gt; Sets <code>Cooldown.Playing</code> to false, also running any other tasks needed when ending a <code>Cooldown</code>.</p> <p><code>Cooldown.OnEnd()</code> =&gt; Assigned to the <code>Cooldown</code> on creation by the game. Runs when <code>Cooldown.Time &lt;= 0</code>.</p>"},{"location":"Instance/#basic","title":"Basic","text":""},{"location":"Instance/#instance","title":"Instance","text":"<p>The most basic instance you could have. Think of it like a <code>Node</code> in Godot. Every class of Instance inherits from this class.</p> <p><code>.new({id, type, parent: Nowhere})</code></p> <pre><code>{\nId: String,\nType: String,\nClass: \"Instance\",\nScript: function,\nParent: [Instance],\n}\n</code></pre> <p><code>Instance.GetChildren()</code> =&gt; Gets all children of the instance.</p> <p><code>Instance.GetDescendants()</code> =&gt; Gets all descendants of the instance.</p> <p><code>Instance.IsA(classname = Instance.ClassNameHere | \"ClassNameHere\")</code> =&gt; Returns if the instance is the given class.</p> <p><code>Instance.Script(speed)</code> =&gt; A script function that can be assigned to this instance. It is ran every frame.</p> <p><code>Instance.Destroy()</code> =&gt; Removes the instance and it's descendants completely from the game.</p>"},{"location":"Instance/#service","title":"Service","text":"<p>The class every service uses. Not really useful to anything you'd do in a game. It's the same as an Instance, just with the Parent property locked.</p> <p>Inherits: Instance</p> <p><code>.new({id, type, parent: Nowhere})</code></p> <pre><code>{\nId: String,\nType: String,\nClass: \"Service\",\nScript: function,\nParent: [Instance],\n}\n</code></pre>"},{"location":"RenderService/","title":"RenderService","text":""},{"location":"RenderService/#about","title":"About","text":"<p><code>RenderService</code> is a service made for rendering. It's mainly made for only engine use, but in the future I might add more methods to the service.</p>"},{"location":"RenderService/#functions","title":"Functions","text":"<ul> <li> <p><code>RenderService.Draw(drawframe = DrawFrame.new())</code> =&gt; Draws the given DrawFrame</p> </li> <li> <p><code>RenderService.LoadImage(directory = \"Instance2d/placeholder.bmp\")</code> =&gt; Loads the given <code>path</code> for use in <code>RenderService.Draw()</code>. Used internally to load images so they can be drawn to the screen.</p> </li> </ul>"},{"location":"RunService/","title":"RunService","text":""},{"location":"RunService/#about","title":"About","text":"<p><code>RunService</code> is the module responsible for running the actual game itself. On <code>RunService.frame(deltatime)</code> it computes the logic for every instance, then draws every instance inside the <code>Screen</code>.</p>"},{"location":"RunService/#properties","title":"Properties","text":"<ul> <li><code>TargetFrameRate</code>: The target fps of the game. It isn't actually used inside the framework, just used when your making the gameloop run.</li> <li><code>GameSpeed</code>: The speed the game runs at. It wont effect deltatime, only the deltatime given. (Dont set this as a percentage.)</li> </ul>"},{"location":"RunService/#functions","title":"Functions","text":"<ul> <li><code>RunService.frame(speed)</code> =&gt; Executes a single frame.</li> <li><code>RunService.instancedrawframe(instance)</code> =&gt; Draws the instance given.</li> <li><code>RunService.instancelogicframe(instance)</code> =&gt; Does the logic for the instance given.</li> <li><code>RunService.logicframe(speed, instances)</code> =&gt; Does the logic for every instance given.</li> <li><code>RunService.drawframe(instances)</code> =&gt; Does the drawing for every instance given.</li> </ul>"},{"location":"Screen/","title":"Screen","text":""},{"location":"Screen/#about","title":"About","text":"<p>The <code>Screen</code> is where you put every object you want to display.</p>"},{"location":"Screen/#properties","title":"Properties","text":"<p><code>Camera</code>: The Camera2d the Game uses to render everything.</p>"}]}